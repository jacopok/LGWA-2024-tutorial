{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format:\n",
        "    beamer:\n",
        "        code-fold: true\n",
        "        bibliography: introduction.bib\n",
        "        # titlegraphic: ../data/\n",
        "        theme: boxes\n",
        "\n",
        "author: Jacopo Tissino\n",
        "date: 2024-10-07\n",
        "---\n",
        "\n",
        "\n",
        "# Forecasting for the Lunar Gravitational Wave Antenna\n",
        "\n",
        "> What will be the sensitivity of the LGWA to gravitational waves?\n",
        "\n",
        "> How many sources will it detect?\n",
        "\n",
        "> How well will it constrain their parameters?\n",
        "\n",
        "---\n",
        "\n",
        "## The Lunar Gravitational Wave Antenna noise curve\n",
        "\n",
        "![](figures/Detector_strains.png)\n",
        "\n",
        "---\n",
        "\n",
        "## Matched filtering\n",
        "\n",
        "The gravitational-wave **detection** problem: we have data \n",
        "\n",
        "$$ d(t) = \\underbrace{h_\\theta(t)}_{\\text{GW}} + \\underbrace{\n",
        "    n _{\\text{Gaussian}} (t) + \n",
        "    n _{\\text{non-Gaussian}} (t)  \n",
        "}_{\\text{noise}\\  n(t)}\n",
        "$$\n",
        "\n",
        "and we want to find where $h(t)$ is, while typically $|h| \\ll |n|$.\n",
        "The Gaussian component has a spectral density $S_n(f)$.\n",
        "Let's assume we want to use a **linear filter**, so that in the time domain it reads:\n",
        "\n",
        "$$ \\hat{\\rho}(\\tau ) = \\int d(t + \\tau) f(t) \\text{d}t\n",
        "$$\n",
        "\n",
        "for some function $f(t)$.\n",
        "\n",
        "---\n",
        "\n",
        "We want to maximize the \"**distinguishability**\" of the signal: we can quantify it with the signal-to-noise ratio\n",
        "\n",
        "$$ \\frac{S}{N} = \\frac{\\hat{\\rho} (\\text{a signal is present})}{ \\text{root-mean-square of } \\hat{\\rho}}\n",
        "$$\n",
        "\n",
        "Ignoring the non-Gaussian part of the noise, the **optimal** solution is $\\hat{\\rho} \\propto (d|h)$, where\n",
        "\n",
        "$$ (a | b) = 4 \\Re \\int_0^\\infty \\frac{a(f) b^*(f)}{S_n(f)}\\text{d}f \\,,\n",
        "$$\n",
        "\n",
        "---\n",
        "\n",
        "## Optimal signal-to-noise ratio\n",
        "\n",
        "The **signal-to-noise** ratio statistic is \n",
        "\n",
        "$$ \\rho = \\frac{S}{N} = \\frac{(d|h)}{\\sqrt{(h|h)}}\n",
        "$$\n",
        "\n",
        "\n",
        "With the expected noise realization ($\\langle n(t) \\rangle = 0$):\n",
        "\n",
        "$$\n",
        "\\rho _{\\text{opt}} = \\sqrt{(h|h)} = 2 \\sqrt{\\int_0^\\infty \\frac{|h(f)|^2}{S_n(f)} \\text{d}f}\n",
        "\\,.\n",
        "$$ \n",
        "\n",
        "If we do not have the data, this is a good proxy. \n",
        "For a real detector, we do injection studies and compute a False Alarm Rate (FAR).\n",
        "\n",
        "---\n",
        "\n",
        "## SNR thresholds\n",
        "\n",
        "> What is a \"high enough\" value for the SNR?\n",
        "\n",
        "Without time shifts nor non-Gaussianities, the SNR would simply follow\n",
        "a $\\chi^2$ distribution with two degrees of freedom:\n",
        "\"five $\\sigma$\" significance with a threshold of $\\rho = 5.5$. \n",
        "\n",
        "In real data this has to be estimated through **injections**:\n",
        "\n",
        "$$ \\text{FAR} = \\text{FAR}_8 \\exp \\left( - \\frac{\\rho - 8}{\\alpha}\\right) \\,.\n",
        "$$\n",
        "\n",
        "For BNS in O1: $\\alpha = 0.13$ and $\\text{FAR}_8 = 30000 \\text{yr}^{-1}$.\n",
        "\n",
        "---\n",
        "\n",
        "## Gravitational wave data analysis\n",
        "\n",
        "Suppose we measure $d = h_\\theta + n$, where our model for $h_\\theta = h(t; \\theta)$ depends on several parameters (typically, between 10 and 15).\n",
        "\n",
        "We can estimate the parameters $\\theta$ by exploring the **posterior distribution** \n",
        "\n",
        "$$ p(\\theta | d) = \\mathcal{L}(d | \\theta ) \\pi (\\theta ) = \\mathcal{N} \\exp \\left( (d | h_\\theta) - \\frac{1}{2} (h_\\theta | h_\\theta) \\right) \\pi (\\theta )\\,,\n",
        "$$\n",
        "\n",
        "where $\\pi (\\theta )$ is our **prior distribution** on the parameters.\n",
        "We are neglecting non-Gaussianities in the noise, and assuming its spectral density is known!\n",
        "\n",
        "---\n",
        "\n",
        "The posterior is explored **stochastically** (with MCMC, nested sampling...) yielding many samples $\\theta_i$ distributed according to $p(\\theta | d)$, with which can compute summary statistics:\n",
        "\n",
        "- mean $\\langle \\theta_i \\rangle$, \n",
        "- variance $\\sigma_i^2 = \\langle (\\theta_i- \\langle \\theta_i\\rangle)^2 \\rangle$, \n",
        "- covariance $\\mathcal{C}_{ij} =\\langle (\\theta_i- \\langle \\theta_i\\rangle) (\\theta_j- \\langle \\theta_j\\rangle) \\rangle$.\n",
        "\n",
        "At this stage, we are not making any approximation, and the \n",
        "covariance matrix is just a **summary** tool - the full posterior is still available.\n",
        "\n",
        "---\n"
      ],
      "id": "5622b3c7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from multivariate_normal import MultivariateNormal\n",
        "n = MultivariateNormal([0, 0], [[1, 0.8], [0.8, 1]])\n",
        "n.plot_2d_analytical(0, 0, .9)"
      ],
      "id": "19882a7f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Antenna pattern\n",
        "\n",
        "The strain at the detector depends on the antenna pattern:\n",
        "$$ h(t) = h_{ij} (t) D_{ij}(t) = h_+ (t) F_+ (t) + h_\\times (t) F_\\times (t) \\,.\n",
        "$$\n",
        "\n",
        "---\n",
        "\n",
        "## Fisher matrix\n",
        "\n",
        "In the Fisher matrix approximation, we are approximating the likelihood as \n",
        "\n",
        "$$ \\mathcal{L}(d | \\theta) \\approx \\mathcal{N} \\exp \\left(- \\frac{1}{2} \\Delta \\theta^i \\mathcal{F}_{ij} \\Delta \\theta^j \\right)\n",
        "$$\n",
        "\n",
        "where $\\Delta \\theta^i = \\theta ^i - \\langle \\theta ^i \\rangle$.\n",
        "\n",
        "A __multivariate normal distribution__, with covariance matrix $\\mathcal{C}_{ij} = \\mathcal{F}_{ij}^{-1}$.\n",
        "This is a good approximation for the posterior in the high-SNR limit, since the prior matters less then.\n",
        "\n",
        "---\n",
        "\n",
        "The Fisher matrix $\\mathcal{F}_{ij}$ can be computed as the scalar product\n",
        "of the derivatives of waveforms: \n",
        "$$ \\mathcal{F}_{ij} = \\left.\\left\\langle \\partial_i \\partial_j \\mathcal{L} \\right\\rangle \\right|_{\\theta = \\langle \\theta \\rangle} =  ( \\partial_i h | \\partial_j h ) = 4 \\Re \\int_0^{\\infty} \\frac{1}{S_n(f)}  \\frac{\\partial h}{\\partial \\theta _i} \\frac{\\partial h^*}{\\partial \\theta _j}\\text{d}f\\,.\n",
        "$$\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "For $N$ detectors, \n",
        "\n",
        "$$ \\mathcal{F}_{ij} = \\sum_{k = 1}^N \\mathcal{F}_{ij}^{(k)} \n",
        "$$\n",
        "\n",
        "The covariance matrix can be evaluated in seconds, while \n",
        "full parameter estimation takes hours to weeks.\n",
        "\n",
        "Also, it is easy in the Fisher approach to account for new effects such as \n",
        "**the rotation of the Earth**.\n",
        "\n",
        "Tricky step computationally: **inverting** $\\mathcal{F}_{ij}$ to get $\\mathcal{C}_{ij}$.\n"
      ],
      "id": "b106e10b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/jacopo/.cache/pypoetry/virtualenvs/introduction-kim7W4h0-py3.11/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}